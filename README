archsak, e342791191
Aharon Saksonov 207600164, Elsa Sebagh 342791191
EX: 1

FILES:
myfile.c -- a file with some code
myfile.h -- a file with some headers

REMARKS:
These are some remarks that
I want the graders to know
about this submission.

ANSWERS:

Assignment 1:
The OS copy some file and get the file access mode and the file status flags.
After it the OS change the address of the end of the heap.  after it,
the OS Retrieves the file status flags for file descriptor 3, and after all print two messages -
the first says that the run failed with incorrect number of arguments, and the second success message,
and close the file.

Assignment 2:
![graph](./graph.jpeg)
Graph explanation:
We can see the plot of the sequential access is more or less stable, while the random access has two noticeable
grows. If we had run the program on bigger inputs, those would have been more noticeable (aka both plots would have been
more smooth and with less spikes).
The random access plot and sequential access plot start similar when all the array size fits in L1d, therefore all access
is from L1d with a stable latency.
With larger arrays that no longer fit only in L1d, we need to store some of the array in L2 (and L3 with even bigger
arrays). With sequential access, the CPU hardware prefetching can easily guess which parts of the array we will want to
access next and saves them in L1d, so the latency stays similar.
However, with random access, the CPU can't properly guess which element we will want to access next, therefore most of
the time we still need to access L2 or L3. Those are bigger and slower caches, therefore we can see a noticeable increase
in the latency when the array size goes from L1d to L2 and from L2 to L3.






